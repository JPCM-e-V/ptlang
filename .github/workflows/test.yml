name: Test

on:
  push:
  pull_request:

jobs:
  build:
    strategy:
      matrix:
        build-type: [Debug, RelWithDebInfo]
        os: [ubuntu-latest, macos-latest]
        asan-args: ["", "-fsanitize=address"]
      fail-fast: false
    runs-on: ${{matrix.os}}

    steps:
    - name: Install Deps using Apt
      if: contains(matrix.os, 'ubuntu')
      run: sudo apt-get install -y llvm-15-dev
    - name: Install Deps using Chocolatey
      if: contains(matrix.os, 'windows')
      run: |
          choco install winflexbison3 llvm
          llvm-config --cmakedir
    - name: Install Deps using Homebrew
      if: contains(matrix.os, 'macos')
      run: brew install bison llvm

    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: clang-format
      shell: bash
      run: clang-format --style=file --dry-run --Werror $(find ./src -type f -name '*.c' )

    - name: Configure CMake
      shell: bash
      run: |
          if [[ "${{matrix.os}}" == "windows"* ]]; then
            cmake -B '${{github.workspace}}\build' -G "Visual Studio 17 2022" -T ClangCL -DCMAKE_BUILD_TYPE=${{matrix.build-type}} -DCMAKE_EXPORT_COMPILE_COMMANDS=TRUE -DCMAKE_C_FLAGS="-Wpedantic -Wall -Werror ${{matrix.asan-args}}"
          elif [[ "${{matrix.os}}" == "macos"* ]]; then
            cmake -B '${{github.workspace}}/build' -DBISON_EXECUTABLE=/usr/local/opt/bison/bin/bison -DLLVM_DIR="$(/usr/local/opt/llvm/bin/llvm-config --cmakedir)" -DCMAKE_BUILD_TYPE=${{matrix.build-type}} -DCMAKE_EXPORT_COMPILE_COMMANDS=TRUE -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_C_FLAGS="-Wpedantic -Wall -Werror ${{matrix.asan-args}}"
          else
            cmake -B '${{github.workspace}}/build' -DLLVM_DIR="$(llvm-config-15 --cmakedir)" -DCMAKE_BUILD_TYPE=${{matrix.build-type}} -DCMAKE_EXPORT_COMPILE_COMMANDS=TRUE -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_C_FLAGS="-Wpedantic -Wall -Werror ${{matrix.asan-args}}"
          fi

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.build-type}}

    - name: clang-tidy
      shell: bash
      run: PATH=$PATH:/usr/local/opt/llvm/bin clang-tidy -p build $(find ./src -type f -name '*.c' ) --warnings-as-errors='*'

    - name: Run
      shell: bash
      run: cat ${{github.workspace}}/tests/test.ptl | ${{github.workspace}}/build/ptlang

